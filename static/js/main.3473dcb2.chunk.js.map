{"version":3,"sources":["serviceWorker.js","components/Sertificates.js","components/Fio.js","components/AdminSearch.js","components/PdfToPrint.js","components/AdminPage.js","index.js"],"names":["Boolean","window","location","hostname","match","autoClearingStatus","printedFios","JSON","parse","localStorage","getItem","Fio","props","fio","onClick","selectFio","selectedItem","className","includes","AdminSearch","onChange","placeholder","name","PdfToPrint","this","lastName","flagName","imgId","date","src","alt","React","Component","dataForSertificate","Sertificates","state","adminSearch","applications","isSelecting","indexOfElement","indexOf","setState","selectingDate","clearListNow","clear","reload","autoCleanCheck","console","log","autoClearList","setItem","stringify","intervalId","setInterval","clearInTime","removeItem","Date","hours","getHours","minutes","getMinutes","clearList","dateNow","moment","locale","format","changeDate","e","value","target","alreadyPrinted","handlePrint","push","findApplication","filter","item","copyApplications","toLowerCase","fios","fillterApplications","map","key","content","componentRef","type","style","backgroundColor","ref","el","AdminPage","ReactDOM","render","basename","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3473dcb2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactToPrint, { PrintContextConsumer } from \"react-to-print\";\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nimport Fio from './Fio';\nimport AdminSearch from './AdminSearch';\nimport PdfToPrint from './PdfToPrint';\nimport './App.css';\n\nlet dataForSertificate = JSON.parse(localStorage.getItem(\"dataForSertificate\")) || [];\nlet printedFios = [];\nprintedFios = JSON.parse(localStorage.getItem(\"printedFios\")) || [];\n\nlet autoClearingStatus;\n\n\nclass Sertificates extends React.Component {\n  state = {\n    fio: '',\n    selectedItem: '',\n    date: '',\n    autoClearingStatus: false,\n    adminSearch: '',\n    applications: [],\n  }\n\n  componentWillMount() {\n    this.autoCleanCheck();\n    console.log(localStorage);\n\n    let applications = dataForSertificate.filter(item => typeof item === 'string');\n    this.setState({ applications: applications })\n  }\n\n  isSelecting = (fio) => {\n    let indexOfElement = dataForSertificate.indexOf(fio);\n    this.setState({ selectedItem: dataForSertificate[indexOfElement + 1] });\n    this.setState({ selectedItem: { ...dataForSertificate[indexOfElement + 1], selectFio: fio } })\n    this.setState({ fio: fio });\n    this.selectingDate();\n  }\n  clearListNow = () => {\n    localStorage.clear();\n    window.location.reload();\n  }\n\n\n  autoCleanCheck = () => {\n    autoClearingStatus = JSON.parse(localStorage.getItem(\"autoClearingStatus\"));\n    console.log(autoClearingStatus)\n    if (autoClearingStatus === true) {\n      this.autoClearList();\n    }\n  }\n  autoClearList = () => {\n    let {autoClearingStatus} = this.state;\n    if (autoClearingStatus === false) {\n      autoClearingStatus = true;\n      localStorage.setItem(\"autoClearingStatus\", JSON.stringify(autoClearingStatus));\n      this.setState({ autoClearingStatus: true })\n      let intervalId = setInterval(() => {\n        this.clearInTime();\n      }, 50000);\n      localStorage.setItem(\"intervalId\", JSON.stringify(intervalId));\n      console.log('процесс пошел!');\n      console.log(localStorage);\n    }\n    else {\n      let autoClearingStatus = false;\n      localStorage.setItem(\"autoClearingStatus\", JSON.stringify(autoClearingStatus));\n      localStorage.removeItem('intervalId');\n      this.setState({ autoClearingStatus: false });\n      console.log('процесс заглох');\n      console.log(localStorage);\n      console.log(autoClearingStatus);\n    }\n  }\n  clearInTime = () => {\n    let date = new Date;\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    if (hours === 0 && minutes === 0) {\n      this.clearList();\n    }\n  }\n  clearList = () => {\n    localStorage.removeItem('dataForSertificate');\n    localStorage.removeItem('printedFios');\n    window.location.reload();\n  }\n\n\n  selectingDate = () => {\n    let dateNow = moment().locale('ru').format('DD MMMM YYYY');\n    this.setState({ date: dateNow });\n  }\n  changeDate = (e) => {\n    const { value } = e.target;\n    let dateNow = moment(value).locale('ru').format('D MMMM YYYY');\n    this.setState({ date: dateNow });\n  }\n  alreadyPrinted = (handlePrint, fio) => {\n    handlePrint();\n    if (fio !== '') {\n      printedFios.push(fio);\n    }\n    localStorage.setItem(\"printedFios\", JSON.stringify(printedFios));\n    console.log(printedFios);\n  }\n  findApplication = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n  fillterApplications() {\n    const { adminSearch, applications } = this.state;\n\n    let copyApplications = [...applications];\n    if (adminSearch !== '') {\n      copyApplications = copyApplications.filter(item => {\n        if (item.toLowerCase().indexOf(adminSearch.toLowerCase()) === 0) {\n          return item;\n        }\n      })\n    }\n    return copyApplications;\n  }\n\n\n  render() {\n    console.log(localStorage);\n    console.log(this.state);\n    const applications = this.fillterApplications();\n\n    const fios = applications.map(fio => (\n      <Fio\n        key={fio}\n        fio={fio}\n        onClick={this.isSelecting}\n        selectedItem={this.state.selectedItem}\n      />\n    ))\n\n    return (\n      <div className='adminPage'>\n\n        <ul className=\"sertificate\">\n          {fios}\n        </ul>\n\n        <div className='functional'>\n\n          <AdminSearch\n            onChange={this.findApplication}\n            adminSearch={this.state.adminSearch}\n          />\n\n          <ReactToPrint\n            content={() => this.componentRef}>\n\n            <PrintContextConsumer>\n              {({ handlePrint }) => (\n                <button\n                  className='print'\n                  onClick={() => this.alreadyPrinted(handlePrint, this.state.fio)}\n                >\n                  Печать\n                </button>\n              )}\n            </PrintContextConsumer>\n          </ReactToPrint>\n\n          <input type=\"date\" name=\"date\" className=\"calendar\" onChange={this.changeDate} />\n\n          <div className='cleanering'>\n            <button\n              className='clear' onClick={this.clearListNow}>Очистить список</button>\n            <button\n              className='autoclear'\n              style={this.state.autoClearingStatus === true ? { backgroundColor: 'lime' } : { backgroundColor: 'white' }}\n              onClick={this.autoClearList}\n            >\n              Очищать автоматически в 00:00\n            </button>\n          </div>\n\n          <div className='pdfToPrint'>\n            <PdfToPrint\n              ref={el => (this.componentRef = el)}\n              fio={this.state.fio}\n              date={this.state.date}\n              selectedItem={this.state.selectedItem}\n            />\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default Sertificates;","import React from 'react';\n\nimport './App.css';\n\nlet printedFios = JSON.parse(localStorage.getItem(\"printedFios\")) || [];\n\n\nconst Fio = (props) => {\n    const { fio, onClick, selectedItem } = props;\n    const {  selectFio } = selectedItem;\n\n    return (\n        <li className='adminList'>\n            <h3\n            className = {printedFios.includes(fio) === true && fio !== selectFio ? 'printed' \n            : printedFios.includes(fio) === true && fio === selectFio ? 'selectingNow' \n            : printedFios.includes(fio) !== true && fio === selectFio ? 'selectingNow' \n            : 'notSelected'}\n            >{fio}\n            </h3>\n            <button className='formation' onClick={ () => onClick(fio)}>Сформировать</button>\n            {/* <p className='printTime'>Напечатано в {}</p> */}\n        </li>\n    );\n}\n\nexport default Fio;","import React from 'react';\n\nconst AdminSearch = (props) => {\n    const { onChange } = props;\n    return (\n        <div className=\"admin-search-box\">\n            <input \n            className=\"admin-search\"  \n            placeholder=\"Введите фамилию\" \n            name=\"adminSearch\" \n            onChange={onChange} \n            />\n        </div>\n    );\n}\n\nexport default AdminSearch;","import React from \"react\";\n\nconst imgUrl = 'https://dmitrykalko.github.io/rakovich/base/images/';\n\nclass PdfToPrint extends React.Component {\n\n    render() {\n        let { lastName, flagName, imgId } = this.props.selectedItem;\n        let date = this.props.date;\n        \n        return (\n\n            <div className=\"pdf\">\n                <h1 className='title'>Грамота Шляхтича</h1>\n                <img className=\"flagForPdf\" src={imgUrl + +imgId + '.png'} alt=\"flagImage\" />\n                <h4 className='firstString'>Настоящая грамота удостоверяет, что</h4>\n                <h2 className='fio'>{this.props.fio}</h2>\n                <h4 className='secondString'>принадлежит к шляхецкому роду</h4>\n                <h2 className='familyName'>«{lastName}»</h2>\n                <h4 className='thirdString'>с родовым гербом</h4>\n                <h2 className='familyFlag'>«{flagName}»</h2>\n                <p className=\"datePdf\">{date}</p>\n            </div>\n        );\n    }\n}\n\nexport default PdfToPrint;","import React from 'react';\n\nimport Sertificates from './Sertificates';\n\nimport './App.css';\n\nconst AdminPage = () => {\n  return (\n   <div className='admin'>\n     <h1>Заявки на сертификаты</h1>\n     <Sertificates />\n  </div>\n  )\n}\n\nexport default AdminPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//import SulaApp from './components/SulaApp';\nimport AdminPage from './components/AdminPage';\n\nReactDOM.render(\n<BrowserRouter basename=\"/sula\">\n          {/* <Route path=\"/\" exact component={SulaApp} /> */}\n          <Route path=\"/admin\" exact component={AdminPage} />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}